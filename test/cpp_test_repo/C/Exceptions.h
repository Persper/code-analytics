#pragma once

#include <stdexcept>
#include <iostream>
#include <string>

// ????????????รป????????????
class Exception : public std::exception
{
	std::string msg;
public:
	// ???????????????????????
	Exception() : msg("?????????????") {}
	// ???????????????????????????
	explicit Exception(const std::string& message) : msg(message)
	{
#if _DEBUG
		std::cerr << "Exception constructed: " << message << std::endl;
#endif
	}
	~Exception() noexcept override { }
	const char* what() const noexcept override { return msg.c_str(); }
};

// ?????????????????????????????????????????
class InvalidCastException : public Exception
{
public:
	InvalidCastException(const std::string& message) : Exception(message) { }
};

// ?????????????????????????
class ArgumentException : public Exception
{
	static std::string BuildMessage(const std::string& message, const std::string& argumentName)
	{
		if (argumentName.empty()) return message;
		return message + " ????????" + argumentName + "??";
	}
	std::string _ArgumentName;
public:
	const std::string& ArgumentName() const { return _ArgumentName; }
public:
	ArgumentException(const std::string& message)
		: Exception(message) { }
	ArgumentException(const std::string& message, const std::string& argumentName) 
	: Exception(BuildMessage(message, argumentName)), _ArgumentName(argumentName) { }
};

// ?????????????????????????????????????????
class OperationFailureException : public Exception
{
private:
	int _ErrorCode;
public:
	explicit OperationFailureException(int errorCode)
		: Exception("???????????????" + std::to_string(errorCode) + "??"), _ErrorCode(errorCode)
	{
	}
};
