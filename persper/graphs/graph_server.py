from abc import ABC
from abc import abstractmethod

JS_FILENAME_REGEXES = [
    '.+\.js$',
    '^(?!dist/).+',
    '^(?!test(s)?/).+',
    '^(?!spec/).+',
    '^(?!build/).+',
    '^(?!bin/).+',
    '^(?!doc(s)?/).+'
]


class GraphServer(ABC):

    @abstractmethod
    def update_graph(self, old_filename: str, old_src: str, new_filename: str, new_src: str, patch: bytes):
        """
        Update the graph with a single-file patch
        :param old_filename: the path to a file that the commit modifies
        :param old_src: the source code of the file before the commit
        :param new_filename: the path to the file after the commit
        :param new_src: the source code of the file after the commit
        :param patch: the raw patch generated by GitPython diff
        :return: a function-ID-to-changed-LOCs mapping and an old-function-ID-to-new-function-ID mapping
        """
        pass

    @abstractmethod
    def parse(self, old_filename: str, old_src: str, new_filename: str, new_src: str, patch: bytes):
        """
        Parse a single-file patch without updating the graph
        :param old_filename: the path to a file that the commit modifies
        :param old_src: the source code of the file before the commit
        :param new_filename: the path to the file after the commit
        :param new_src: the source code of the file after the commit
        :param patch: the raw patch generated by GitPython diff
        :return: a function-ID-to-changed-LOCs mapping and an old-function-ID-to-new-function-ID mapping
        """
        pass

    @abstractmethod
    def get_graph(self):
        """
        Retrieve the graph
        :return: A NetworkX graph object
        """
        pass

    @abstractmethod
    def reset_graph(self):
        """Reset the graph discarding all data"""
        pass

    @abstractmethod
    def filter_file(self, filename):
        """
        Check if the file should be filtered out
        :param filename: the path of the file to check
        :return: True if the file should be selected; False otherwise.
        """
        pass

    @abstractmethod
    def config(self, param: dict):
        """
        One-time configuration of the server for following calls
        :param param: key-value pairs of configuration
        """
        pass
